import os
import sys

import pygame
import random


def load_image(name, color_key=None):
    fullname = os.path.join('', 'data/' + name)
    try:
        image = pygame.image.load(fullname)
    except pygame.error as message:
        print('Не удаётся загрузить:', name)
        raise SystemExit(message)
    image = image.convert_alpha()
    if color_key is not None:
        if color_key == -1:
            color_key = image.get_at((0, 0))
        image.set_colorkey(color_key)
    return image


def pygame_start():
    pygame.init()
    screen_size = (600, 900)
    return pygame.display.set_mode(screen_size)


screen_size = (600, 900)
screen = pygame_start()
FPS = 50
running = True
clock = pygame.time.Clock()
entity_group = pygame.sprite.Group()
bullets_group = pygame.sprite.Group()
player_group = pygame.sprite.Group()
font_text = pygame.font.Font(None, 60)
font_name = pygame.font.Font(None, 90)


def terminate():
    pygame.quit()
    sys.exit()


# Меню
def start_screen():
    button_text = ["Играть",
                   "Обучение",
                   "ВЫЙТИ"]

    menu = pygame.transform.scale(load_image('menu.png'), screen_size)
    screen.blit(menu, (0, 0))
    string_rendered = font_name.render('Galactic Warfare', 1, pygame.Color('white'))
    intro_rect = string_rendered.get_rect()
    intro_rect.top = 100
    intro_rect.x = (screen_size[0] - string_rendered.get_width()) // 2
    screen.blit(string_rendered, intro_rect)
    text_coord = 300
    buttons = []
    for line in button_text:
        string_rendered = font_text.render(line, 1, pygame.Color('white'))
        intro_rect = string_rendered.get_rect()
        text_coord += 60
        intro_rect.top = text_coord
        intro_rect.x = (screen_size[0] - string_rendered.get_width()) // 2
        text_coord += intro_rect.height
        screen.blit(string_rendered, intro_rect)
        buttons.append((intro_rect.x, text_coord - 60, intro_rect.x + string_rendered.get_width(), text_coord))
    stop = False
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if (event.pos[0] >= buttons[-1][0] and event.pos[0] <= buttons[-1][2]) and (
                        event.pos[1] >= buttons[-1][1] and event.pos[1] <= buttons[-1][3]):
                    terminate()
                elif (event.pos[0] >= buttons[0][0] and event.pos[0] <= buttons[0][2]) and (
                        event.pos[1] >= buttons[0][1] and event.pos[1] <= buttons[0][3]):
                    Playing()
                    stop = True
                    break
                elif (event.pos[0] >= buttons[1][0] and event.pos[0] <= buttons[1][2]) and (
                        event.pos[1] >= buttons[1][1] and event.pos[1] <= buttons[1][3]):
                    tutorial()
                    stop = True
                    break
        if stop:
            break
        pygame.display.flip()
        clock.tick(FPS)


def tutorial():
    text = ["<- - влево",
            "-> - вправо",
            "Z - смена режима щита",
            "С - стрельба",
            "Esc - выйти из игры",
            "НАЗАД"]
    menu = pygame.transform.scale(load_image('menu.png'), screen_size)
    screen.blit(menu, (0, 0))
    string_rendered = font_name.render('Обучение', 1, pygame.Color('white'))
    intro_rect = string_rendered.get_rect()
    intro_rect.top = 100
    intro_rect.x = (screen_size[0] - string_rendered.get_width()) // 2
    screen.blit(string_rendered, intro_rect)
    text_coord = 200
    buttons = []
    for line in text:
        string_rendered = font_text.render(line, 1, pygame.Color('white'))
        intro_rect = string_rendered.get_rect()
        text_coord += 40
        intro_rect.top = text_coord
        intro_rect.x = (screen_size[0] - string_rendered.get_width()) // 2
        text_coord += intro_rect.height
        screen.blit(string_rendered, intro_rect)
        buttons.append((intro_rect.x, text_coord - 60, intro_rect.x + string_rendered.get_width(), text_coord))
    stop = False
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if (event.pos[0] >= buttons[-1][0] and event.pos[0] <= buttons[-1][2]) and (
                        event.pos[1] >= buttons[-1][1] and event.pos[1] <= buttons[-1][3]):
                    start_screen()
                    stop = True
                    break
        if stop:
            break
        pygame.display.flip()
        clock.tick(FPS)


class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__(player_group)
        self.image = pygame.transform.scale(load_image('Player0.png'), (64, 64))
        self.rect = self.image.get_rect().move((screen_size[0] - self.image.get_height()) // 2,
                                               screen_size[1] - self.image.get_height() * 1.2)
        self.speed = 30, 0
        self.health = 3
        self.shield_type = False

    def move(self, dx, *args):
        if (dx > 0 and self.rect[0] + self.image.get_width() < screen_size[0]) or (dx < 0 and self.rect[0] > 0):
            self.rect = self.image.get_rect().move(self.rect[0] + dx, screen_size[1] - self.image.get_height() * 1.2)

    def shield_toggle(self):
        self.shield_type = not self.shield_type
        self.image = pygame.transform.scale(load_image(f'Player{int(self.shield_type)}.png'), (64, 64))

    def shoot(self):
        Missile(f'Bullet{int(self.shield_type)}.png',
                (self.rect[0] + self.image.get_width() // 2 - 5, self.rect[1] - 25), (0, -20))


class Enemy(pygame.sprite.Sprite):
    def __init__(self, img, spawn, speed, health):
        super().__init__(entity_group)
        self.image = load_image(img)
        self.rect = spawn
        self.speed = speed
        self.health = health

    def update(self):
        self.rect = self.image.get_rect().move(self.rect[0] + self.speed[0], self.rect[1] + self.speed[1])
        if self.rect[0] >= screen_size[0] or self.rect[0] <= 0 or self.rect[1] >= screen_size[1] or self.rect[1] <= 0:
            self.kill()
        #if pygame.sprite.spritecollideany(self, bullets_group):
            #self.health -= 1


class Missile(pygame.sprite.Sprite):
    def __init__(self, img, spawn, speed):
        super().__init__(bullets_group)
        self.image = pygame.transform.scale(load_image(img), (10, 20))
        self.rect = spawn
        self.speed = speed

    def update(self):
        self.rect = self.image.get_rect().move(self.rect[0] + self.speed[0], self.rect[1] + self.speed[1])
        if self.rect[0] >= screen_size[0] or self.rect[0] <= 0 or self.rect[1] >= screen_size[1] or self.rect[1] <= 0:
            self.kill()
        #if pygame.sprite.spritecollideany(self, player_group):
            #self.kill()
            #player.health -= 1
        #elif pygame.sprite.spritecollideany(self, entity_group):
            #self.kill()


def move(entity, movement):
    dx, dy = entity.speed
    if movement == "left":
        entity.move(- dx, 0)
    elif movement == "right":
        entity.move(dx, 0)
    elif movement == 'up':
        entity.move(0, - dy)
    else:
        entity.move(0, dy)


def Playing():
    running = True
    period = 50
    TIMER = pygame.USEREVENT + 1
    ENEMY_SPAWN = pygame.USEREVENT + 2
    pygame.time.set_timer(TIMER, period)
    pygame.time.set_timer(ENEMY_SPAWN, 1000)
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    move(player, 'left')
                elif event.key == pygame.K_RIGHT:
                    move(player, 'right')
                elif event.key == pygame.K_z:
                    player.shield_toggle()
                elif event.key == pygame.K_c:
                    player.shoot()
                elif event.key == pygame.K_ESCAPE:
                    running = False
                    start_screen()
            if event.type == TIMER:
                entity_group.update()
                bullets_group.update()
            if event.type == ENEMY_SPAWN:
                Enemy(f'Soldier.png',
                      (random.randint(32, screen_size[0] - 32), 32), (0, 5), 3)
        # GUI
        health = f'{player.health} ОЗ'
        gui_render = font_text.render(health, 1, pygame.Color('red'))
        gui_rect = gui_render.get_rect()
        gui_rect.top = 20
        gui_rect.x = 20
        screen.blit(pygame.transform.scale(load_image('menu.png'), screen_size), (0, 0))
        screen.blit(gui_render, gui_rect)
        entity_group.draw(screen)
        bullets_group.draw(screen)
        player_group.draw(screen)
        pygame.display.flip()
    pygame.quit()


player = Player()
start_screen()
